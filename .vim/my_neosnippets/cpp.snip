include c.snip

snippet     singleton_static
options     head
	class ${1:#:name} {
	 private:
	    $1() = default;
	    ~$1() = default;
	 public:
	    $1(const $1&) = delete;
	    $1& operator=(const $1&) = delete;
	    $1($1&&) = delete;
	    $1& operator=($1&&) = delete;
	
	    static $1& get_instance() {
	        staic $1 instance;
	        return instance;
	    }
	};

snippet     singleton_mozc
options     head
	#include <cassert>
	#include <mutex>
	
	class SingletonFinalizer {
	 public:
	    using FinalizerFunc = void(*)();
	    static void addFinalizer(FinalizerFunc func);
	    static void finalize();
	};
	
	template <typename T>
	class Singleton final {
	 public:
	    static T& get_instance() {
	        std::call_once(initFlag, create);
	        assert(instance);
	        return *instance;
	    }
	
	 private:
	    static void create() {
	        instance = new T;
	        SingletonFinalizer::addFinalizer(&Singleton<T>::destroy);
	    }
	
	    static void destroy() {
	        delete instance;
	        instance = nullptr;
	    }
	
	    static std::once_flag initFlag;
	    static T* instance;
	};
	
	template <typename T> std::once_flag Singleton<T>::initFlag;
	template <typename T> T* Singleton<T>::instance = nullptr;
	
	namespace {
	
	constexpr int kMaxFinalizersSize = 256;
	std::mutex gMutex;
	int gNumFinalizersSize = 0;
	SingletonFinalizer::FinalizerFunc gFinalizers[kMaxFinalizersSize];
	
	} // namespace {
	
	void SingletonFinalizer::addFinalizer(FinalizerFunc func) {
	    std::lock_guard<std::mutex> lock(gMutex);
	    assert(gNumFinalizersSize < kMaxFinalizersSize);
	    gFinalizers[gNumFinalizersSize++] = func;
	}
	
	void SingletonFinalizer::finalize() {
	    std::lock_guard<std::mutex> lock(gMutex);
	    for (int i = gNumFinalizersSize - 1; i >= 0; --i) {
	        (*gFinalizers[i])();
	    }
	    gNumFinalizersSize = 0;
	}

snippet     make_unique
options     head
    template<typename T, typename ...Args>
    std::unique_ptr<T> make_unique( Args&& ...args ) {
        return std::unique_ptr<T>( new T( std::forward<Args>(args)... ) );
    }
